initSidebarItems({"mod":[["prelude",""],["resource",""],["schedule",""]],"struct":[["System","The concrete type which contains the system closure provided by the user.  This struct should not be instantiated directly, and instead should be created using `SystemBuilder`."],["SystemAccess","Structure describing the resource and component access conditions of the system."],["SystemBuilder","The core builder of `System` types, which are systems within Legion. Systems are implemented as singular closures for a given system - providing queries which should be cached for that system, as well as resource access and other metadata. ```rust # use legion_core::prelude::; # use legion_systems::prelude::; # #[derive(Copy, Clone, Debug, PartialEq)] # struct Position; # #[derive(Copy, Clone, Debug, PartialEq)] # struct Velocity; # #[derive(Copy, Clone, Debug, PartialEq)] # struct Model; #[derive(Copy, Clone, Debug, PartialEq)] struct Static; #[derive(Debug)] struct TestResource {}"],["SystemId",""]],"trait":[["QuerySet","This trait is for providing abstraction across tuples of queries for populating the type information in the system closure. This trait also provides access to the underlying query information."],["SystemFn","Supertrait used for defining systems. All wrapper objects for systems implement this trait."]]});