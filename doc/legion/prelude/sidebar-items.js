initSidebarItems({"enum":[["Event","Events emitted by a world to subscribers. See `World.subscribe(Sender, EntityFilter)`."]],"fn":[["any",""],["changed","Creates a filter which includes chunks for which entity data components of type `T` have changed since the filter was last executed."],["component","Creates an entity data filter which includes chunks that contain entity data components of type `T`."],["passthrough",""],["tag","Creates a shared data filter which includes chunks that contain shared data components of type `T`."],["tag_value","Creates a shared data filter which includes chunks that contain specific shared data values."]],"struct":[["CommandBuffer","A command buffer used to queue mutable changes to the world from a system. This buffer is automatically flushed and refreshed at the beginning of every frame by `Schedule`. If `Schedule` is not used, then the user needs to manually flush it by performing `CommandBuffer::write`."],["Entity","A handle to an entity."],["Query","Queries for entities within a `World`."],["Read","Reads a single entity data component type from a chunk."],["SubWorld","Provides access to a subset of the entities of a `World`."],["Tagged","Reads a single shared data component type in a chunk."],["TryRead","Reads a single entity data component type from a chunk, if it's present."],["TryWrite","Writes a single entity data component type from a chunk, if it's present."],["Universe","The `Universe` is a factory for creating `World`s."],["World","Contains queryable collections of data associated with `Entity`s."],["Write","Writes to a single entity data component type from a chunk."]],"trait":[["EntityStore","A queryable collection of entities."],["IntoQuery","Converts a `View` into a `Query`."]]});