initSidebarItems({"enum":[["DataTransferItemKind","The kind of drag data item, string or file."],["DropEffect","A DOMString representing the drag operation effect."],["EffectAllowed","A DOMString representing the drag operation that is allowed."],["EventPhase","Indicates the phase of event flow during event proessing."],["KeyboardLocation","The location on the keyboard of a key."],["ModifierKey","A modifier key on the keyboard."],["MouseButton","Represents buttons on a mouse during mouse events."],["MouseWheelDeltaMode","What unit of measure the mouse wheel delta is in"],["SocketMessageData","Represents the types of data which can be received on a web socket. Messages are transmitted tagged as either binary or text: text messages are always received as strings. Binary messages may be received as either blobs or array buffers as preferred by the receiver. This choice is indicated via the `binary_type` field on the web socket."]],"struct":[["AuxClickEvent","The `AuxClickEvent` event is fired when a non-primary pointing device button (e.g. any non-left mouse button) has been pressed and released on an element."],["BeforeUnloadEvent","The `BeforeUnload` event fires when the window is about to be unloaded (to close the page or follow a link). If the event propagation is cancelled, the browser will present the user with a confirmation dialog allowing them to stay on the page or continue."],["BlurEvent","The `BlurEvent` is fired when an element has lost focus. The main difference between this event and focusout is that only the latter bubbles."],["ChangeEvent","The `ChangeEvent` is fired for input, select, and textarea elements when a change to the element's value is committed by the user. Unlike the input event, the change event is not necessarily fired for each change to an element's value."],["ClickEvent","The `ClickEvent` is fired when a pointing device button (usually a mouse's primary button) is pressed and released on a single element."],["ContextMenuEvent","The `ContextMenuEvent` event is fired when the right button of the mouse is clicked (before the context menu is displayed), or when the context menu key is pressed."],["DataTransfer","The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation."],["DataTransferItem","The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object."],["DataTransferItemList","The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList."],["DoubleClickEvent","The `DoubleClickEvent` is fired when a pointing device button (usually a mouse's primary button) is clicked twice on a single element."],["DragDropEvent","The drop event is fired when an element or text selection is dropped on a valid drop target."],["DragEndEvent","The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key)."],["DragEnterEvent","The dragenter event is fired when a dragged element or text selection enters a valid drop target."],["DragEvent","The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user."],["DragExitEvent","The dragexit event is fired when an element is no longer the drag operation's immediate selection target."],["DragLeaveEvent","The dragleave event is fired when a dragged element or text selection leaves a valid drop target."],["DragOverEvent","The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds)."],["DragRelatedEvent","A reference to a JavaScript object which implements the IDragEvent interface."],["DragStartEvent","The dragstart event is fired when the user starts dragging an element or text selection."],["FocusEvent","The `FocusEvent` is fired when an element has received focus. The main difference between this event and focusin is that only the latter bubbles."],["FullscreenChangeEvent","The 'FullscreenChange' event fires when an element enters or exits fullscreen"],["GamepadConnectedEvent","The `GamepadConnected` event is fired on the window object, when the first input is received for a gamepad."],["GamepadDisconnectedEvent","The `GamepadDisconnected` event is fired on the window object, when a gamepad is disconnected."],["GotPointerCaptureEvent","The `GotPointerCaptureEvent` fires when an element receives pointer capture"],["HashChangeEvent","The `HashChangeEvent` is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol)."],["InputEvent","The `InputEvent` is fired synchronously when the value of an input, select, or textarea element is changed. For input elements with type=checkbox or type=radio, the input event should fire when a user toggles the control (via touch, mouse or keyboard) per the HTML5 specification, but historically, this has not been the case. Check compatibility, or attach to the change event instead for elements of these types."],["KeyDownEvent","The `KeyDownEvent` is fired when a key is pressed down. Unlike the `KeyPressEvent` event it's also fired for keys which do not produce a character value."],["KeyPressEvent","The `KeyPressEvent` is fired when a key is pressed down. It's only fired for keys which produce a character value."],["KeyUpEvent","The `KeyUpEvent` is fired when a key is released."],["LoadEndEvent","The `LoadEndEvent` is fired when progress has stopped, e.g. after `ProgressErrorEvent`, `ProgressAbortEvent` or `ProgressLoadEvent` have been dispatched."],["LoadStartEvent","The `LoadStartEvent` is fired when progress has begun."],["LostPointerCaptureEvent","The `LostPointerCaptureEvent` fires when an element loses pointer capture"],["MouseButtonsState","Represents the state of mouse buttons in a `MouseEvent`."],["MouseDownEvent","The `MouseDownEvent` is fired when a pointing device button is pressed on an element."],["MouseEnterEvent","The `MouseEnterEvent` is fired when a pointing device (usually a mouse) is moved over the element that has the listener attached."],["MouseLeaveEvent","The `MouseLeaveEvent` is fired when a pointing device (usually a mouse) is moved out of an element that has the listener attached to it."],["MouseMoveEvent","The `MouseMoveEvent` is fired when a pointing device (usually a mouse) is moved while over an element."],["MouseOutEvent","The `MouseOutEvent` is fired when a pointing device (usually a mouse) is moved off the element that has the listener attached or off one of its children."],["MouseOverEvent","The `MouseOverEvent` is fired when a pointing device (usually a mouse) is moved onto the element that has the listener attached or onto one of its children."],["MouseUpEvent","The `MouseUpEvent` is fired when a pointing device button is released over an element."],["MouseWheelEvent","The `MouseWheelEvent` is fired when a pointing device's wheel button (usually a mousewheel) is rotated over the element that has the listener attached."],["PointerCancelEvent","The `PointerCancelEvent` is fired when a pointer will no longer produce events (for example the device is deactivated), or if the pointer starts a gesture after a pointerdown event (for example panning, zooming, or drag and drop)"],["PointerDownEvent","The `PointerDownEvent` is fired when a pointer becomes active"],["PointerEnterEvent","The `PointerEnterEvent` is fired when a pointing device is moved into the hit test boundaries of an element or its descendants. This event does not bubble."],["PointerLeaveEvent","The `PointerLeaveEvent` is fired when the pointer moves out of the hit test boundaries of an element and it's descendants. This can include when a finger leaves a touch screen or a pen leaves the detectable hover range. This event does not bubble."],["PointerLockChangeEvent","The `PointerLockChangeEvent` fires when the pointer is locked or unlocked"],["PointerLockErrorEvent","The `PointerLockErrorEvent` fires when an error occurs locking a pointer"],["PointerMoveEvent","The `PointerMoveEvent` is fired when a pointer changes coordinates"],["PointerOutEvent","The `PointerOutEvent` is fired when the pointer moves out of the hit test boundaries of an element. This can include when a finger leaves a touch screen or a pen leaves the detectable hover range."],["PointerOverEvent","The `PointerOverEvent` is fired when a pointing device is moved into a element's hit test boundaries."],["PointerUpEvent","The `PointerUpEvent` is fired when a pointer is no longer active"],["PopStateEvent","A `PopStateEvent` is dispatched to the window every time the active history entry changes between two history entries for the same document. If the history entry being activated was created by a call to `history.push_state()` or was affected by a call to `history.replace_state()`, the `PopStateEvent`'s state property contains a copy of the history entry's state object."],["ProgressAbortEvent","The `ProgressAbortEvent` is fired when the progress has been aborted."],["ProgressErrorEvent","The `ProgressErrorEvent` is fired when the progress has failed."],["ProgressEvent","The `ProgressEvent` is fired to indicate that an operation is in progress."],["ProgressLoadEvent","The `ProgressLoadEvent` is fired when progress has successful finished."],["ReadyStateChangeEvent","The readystatechange event is fired when the readyState attribute of a document has changed."],["ResizeEvent","The resize event is fired when the document view has been resized."],["ResourceAbortEvent","The `ResourceAbortEvent` is fired when the loading of a resource has been aborted."],["ResourceErrorEvent","The `ResourceErrorEvent` is fired when an error occurred; the exact circumstances vary, since this event is used from a variety of APIs."],["ResourceLoadEvent","The `ResourceLoadEvent` is fired when a resource and its dependent resources have finished loading."],["ScrollEvent","The scroll event is fired when the document view or an element has been scrolled."],["SelectionChangeEvent","The selectionchange event of the Selection API is fired when the current text selection on a document is changed."],["SlotChangeEvent","The `slotchange` event is fired on an HTMLSlotElement instance (`<slot>` element) when the node(s) contained in that slot change."],["SocketCloseEvent","A SocketCloseEvent is sent to clients using WebSockets when the connection is closed."],["SocketErrorEvent","The error event is fired when an error occurred; the exact circumstances vary, events by this name are used from a variety of APIs."],["SocketMessageEvent","A message event informs a WebSocket object that a message has been received."],["SocketOpenEvent","An open event informs the target that a data connection, has been established."],["SubmitEvent","The submit event is fired when a form is submitted."],["TouchCancel","The `TouchCancel` event is fired when one or more touch points have been disrupted in an implementation-specific manner (for example, too many touch points are created)."],["TouchEnd","The `TouchEnd` event is fired when one or more touch points are removed from the touch surface."],["TouchEnter","The `TouchEnter` event is fired when a touch point is moved onto the interactive area of an element."],["TouchEvent","A reference to a JavaScript object which implements the ITouchEvent interface."],["TouchLeave","The `TouchLeave` event is fired when a touch point is moved off the interactive area of an element."],["TouchMove","The `TouchMove` is fired when one or more touch points are moved along the touch surface."],["TouchStart","The `TouchStart` event is fired when one or more touch points are placed on the touch surface."],["UnloadEvent","The `Unload` event fires when the window has been unloaded and is no longer visible. This event can't be cancelled."]],"trait":[["ConcreteEvent","A trait representing a concrete event type."],["IDragEvent","The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element)."],["IEvent","The `IEvent` interface represents any event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). There are many types of event, some of which use other interfaces based on the main `IEvent` interface. `IEvent` itself contains the properties and methods which are common to all events."],["IFocusEvent","The `IFocusEvent` interface represents focus-related events."],["IGamepadEvent","A GamepadEvent is fired on the window object, when a gamepad is connected or disconnected to the system."],["IKeyboardEvent","`IKeyboardEvent` objects describe a user interaction with the keyboard. Each event describes a key; the event type identifies what kind of activity was performed."],["IMessageEvent","The MessageEvent interface represents a message received by a target object."],["IMouseEvent","The `IMouseEvent` interface represents events that occur due to the user interacting with a pointing device (such as a mouse)."],["IPointerEvent","The `IPointerEvent` interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc."],["IProgressEvent","The `IProgressEvent` interface represents progress-related events."],["ITouchEvent","The `ITouchEvent` interface represents events that occur due to the user interacting with a touch device (such as a phone)."],["IUiEvent","The `IUiEvent` interface represents simple user interface events."]]});